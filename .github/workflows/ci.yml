name: CI - Test Runner

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      gradle-cache-key: ${{ steps.gradle-cache-key.outputs.cache-key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Cache Gradle and Android dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.android/build-cache
          key: gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-

      - name: Gradle cache setup
        uses: gradle/actions/setup-gradle@v3

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Decode google-services.json
        run: echo "$GOOGLE_SERVICES" | base64 --decode > app/google-services.json
        env:
          GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: gradle/actions/setup-gradle@v3
      - name: Run ktfmt + lint
        run: ./gradlew ktfmtCheck lint --parallel --build-cache --configuration-cache

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: gradle/actions/setup-gradle@v3
      - name: Run unit tests
        run: ./gradlew testDebugUnitTest --parallel --build-cache --configuration-cache

  instrumentation-tests:
    name: Instrumentation Tests
    runs-on: ubuntu-latest
    needs: [setup, unit-tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: gradle/actions/setup-gradle@v3

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-api34

      - name: Create AVD snapshot if not cached
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          avd-name: avd-api34
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Start Firebase emulators
        run: |
          if [ -e "firebase.json" ] && jq -e '.emulators' firebase.json >/dev/null; then
            echo "Starting Firebase emulators for instrumentation tests..."
            firebase emulators:start --only auth,firestore --project demo-project &
            echo "Firebase emulators started"
          else
            echo "Firebase emulators not configured, skipping emulator startup..."
          fi

      - name: Run instrumentation tests + Coverage
        timeout-minutes: 25
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          avd-name: avd-api34
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -skin 1080x2400
          disable-animations: true
          script: ./gradlew connectedDebugAndroidTest jacocoTestReport --parallel --build-cache --configuration-cache

  sonar:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [unit-tests, instrumentation-tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: gradle/actions/setup-gradle@v3
      - name: Upload to SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonar --parallel --build-cache --configuration-cache
